openapi: 3.0.3
info:
  title: Beckn Discover API
  description: |
    A generic, extensible search and discovery API for any item types that extend the base Item.jsonld schema via owl:intersectionOf.
    
    The API supports both text search and JSONPath-based filtering (RFC 9355) with the ability to filter across extended item schemas while returning a unified catalog-based response structure. Response fields are automatically determined by the schema-settings.json referenced in each item's @context. It automatically adapts to any schema that extends beckn:Item.
    
    ## Key Features
    - Generic Schema Support: Any item type extending beckn:Item via owl:intersectionOf is automatically supported
    - JSON-LD Compatibility: Full support for JSON-LD context and type information
    - Catalog-Based Results: Returns catalogs containing items with proper schema context
    - Flexible Filtering: Support for JSONPath expressions on any field from extended item schemas
    - Dynamic Context: Automatic context generation based on returned item types
    - Schema-Driven Responses: Response fields automatically determined by schema-settings.json
    - No Hardcoded Dependencies: API works with any new item schemas without changes
    - Flexible Request Structure: Flat request body supporting text_search, filters, or both together with optional pagination
  version: 2.0.0
  contact:
    name: Beckn Protocol
    url: https://becknprotocol.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://staging-api.becknprotocol.io
    description: Staging server
  - url: http://localhost:8080
    description: Local development server

paths:
  /beckn/v1/discover:
    post:
      summary: Discover items across multiple schemas
      description: |
        Search and discover items across any schemas that extend beckn:Item via owl:intersectionOf.
        Supports text search, JSONPath-based filtering (RFC 9355), or both together with automatic schema adaptation.
        Returns results in catalog format with proper schema context.
      operationId: discoverItems
      tags:
        - Discovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverRequest'
            examples:
              structured_query:
                summary: Structured query for electronic items
                description: Search for gaming laptops with specific filters
                value:
                  context:
                    ts: "2024-04-10T16:10:50+05:30"
                    msgid: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
                    traceid: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
                    network_id: "bap.net/electronics"
                    schema_context: "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                  text_search: "gaming laptop premium tech"
                  filters: "$[?(@.rating.value >= 4.0 && @.electronic.brand.name == 'Premium Tech' && @.electronic.price['schema:price'] <= 2000 && @.locations.gps within_radius(40.7128, -74.0060, 10km))]"
                  pagination:
                    page: 1
                    limit: 20
              natural_language:
                summary: Natural language query for electronic items
                description: Human-readable search query for electronics
                value:
                  context:
                    ts: "2024-04-10T16:10:50+05:30"
                    msgid: "5b8g25d4-e72f-5e5g-cf89-292945ff0g7e"
                    traceid: "5b8g25d4-e72f-5e5g-cf89-292945ff0g7e"
                    network_id: "bap.net/electronics"
                    schema_context: "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                  text_search: "I want to buy a red tesla model 3 under 50k near san francisco"
                  pagination:
                    page: 1
                    limit: 20
              grocery_search:
                summary: Search for grocery items with specific filters
                description: Search for organic grocery items with nutritional filters
                value:
                  context:
                    ts: "2024-04-10T16:10:50+05:30"
                    msgid: "6c9h36e5-f83g-6f6h-dg90-303056gg1h8f"
                    traceid: "6c9h36e5-f83g-6f6h-dg90-303056gg1h8f"
                    network_id: "bap.net/grocery"
                    schema_context: "https://example.org/schema/items/v1/GroceryItem/schema-settings.json"
                  text_search: "organic apples fresh"
                  filters: "$[?(@.rating.value >= 4.0 && @.grocery.organicCertification ~ 'USDA Organic' && @.grocery.expiryDate > '2024-12-31')]"
                  pagination:
                    page: 1
                    limit: 10
              combined_search:
                summary: Combined text search and filters
                description: Search with both text search and JSONPath filters
                value:
                  context:
                    ts: "2024-04-10T16:10:50+05:30"
                    msgid: "7d0i47f6-g94h-7g7i-eh01-414167hh2i9g"
                    traceid: "7d0i47f6-g94h-7g7i-eh01-414167hh2i9g"
                    network_id: "bap.net/electronics"
                    schema_context: "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                  text_search: "gaming laptop"
                  filters: "$[?(@.electronic.price['schema:price'] <= 2000 && @.electronic.brand.name == 'Premium Tech')]"
                  pagination:
                    page: 1
                    limit: 15
      responses:
        '200':
          description: Successful discovery response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverResponse'
              examples:
                mixed_items:
                  summary: Electronic items catalog response
                  description: Response containing electronic items in catalog format
                  value:
                    context:
                      ts: "2024-04-10T16:10:50+05:30"
                      msgid: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
                      traceid: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
                      network_id: "bap.net/electronics"
                    catalogs:
                        - "@type": "beckn:Catalog"
                          "beckn:descriptor":
                            "@type": "beckn:Descriptor"
                            "schema:name": "Premium Tech Electronics Store"
                            "beckn:shortDesc": "High-quality electronics and gaming equipment"
                          "beckn:timePeriod":
                            "@type": "beckn:TimePeriod"
                            "schema:startDate": "2025-01-27"
                            "schema:endDate": "2026-12-31"
                          "beckn:items":
                            - "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                              "@type": "beckn:ElectronicItem"
                              "electronic:electronicItemId": "laptop-item-001"
                              "schema:name": "Premium Gaming Laptop Pro"
                              "beckn:descriptor":
                                "@type": "beckn:Descriptor"
                                "schema:name": "Premium Gaming Laptop Pro"
                                "beckn:shortDesc": "High-performance gaming laptop with RTX graphics"
                              "electronic:price":
                                "@type": "beckn:Price"
                                "schema:price": 1499.99
                                "schema:priceCurrency": "USD"
                              "electronic:brand":
                                "@type": "schema:Brand"
                                "schema:name": "Premium Tech"
                              "beckn:rating":
                                "@type": "beckn:Rating"
                                "beckn:ratingValue": 4.8
                                "beckn:ratingCount": 156
                electronic_only:
                  summary: Electronic items only response
                  description: Response containing only electronic items in catalog format
                  value:
                    context:
                      ts: "2024-04-10T16:10:50+05:30"
                      msgid: "7d0i47f6-g94h-7g7i-eh01-414167hh2i9g"
                      traceid: "7d0i47f6-g94h-7g7i-eh01-414167hh2i9g"
                      network_id: "bap.net/electronics"
                    catalogs:
                        - "@type": "beckn:Catalog"
                          "beckn:descriptor":
                            "@type": "beckn:Descriptor"
                            "schema:name": "Premium Tech Electronics Store"
                            "beckn:shortDesc": "High-quality electronics and gaming equipment"
                          "beckn:timePeriod":
                            "@type": "beckn:TimePeriod"
                            "schema:startDate": "2025-01-27"
                            "schema:endDate": "2026-12-31"
                          "beckn:items":
                            - "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                              "@type": "beckn:ElectronicItem"
                              "electronic:electronicItemId": "laptop-001"
                              "schema:name": "Premium Gaming Laptop Pro"
                              "beckn:descriptor":
                                "@type": "beckn:Descriptor"
                                "schema:name": "Premium Gaming Laptop Pro"
                                "beckn:shortDesc": "High-performance gaming laptop with RTX graphics"
                              "electronic:price":
                                "@type": "beckn:Price"
                                "schema:price": 1499.99
                                "schema:priceCurrency": "USD"
                              "electronic:brand":
                                "@type": "schema:Brand"
                                "schema:name": "Premium Tech"
                              "beckn:rating":
                                "@type": "beckn:Rating"
                                "beckn:ratingValue": 4.8
                                "beckn:ratingCount": 156
        '400':
          description: Bad request - Invalid parameters or schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_schema_field:
                  summary: Invalid schema field error
                  description: Error when referencing non-existent fields in extended schemas
                  value:
                    error:
                      code: "INVALID_SCHEMA_FIELD"
                      message: "Field 'electronic:invalidField' not found in ElectronicItem schema"
                      details:
                        field: "electronic:invalidField"
                        schema: "ElectronicItem"
                        available_fields:
                          - "electronic:brand"
                          - "electronic:sku"
                          - "electronic:price"
                context_resolution_failed:
                  summary: Context resolution failed error
                  description: Error when failing to resolve schema context
                  value:
                    error:
                      code: "CONTEXT_RESOLUTION_FAILED"
                      message: "Failed to resolve schema context for 'https://invalid-schema.com'"
                      details:
                        context_uri: "https://invalid-schema.com"
                        available_contexts:
                          - "https://becknprotocol.io/schema/context.jsonld"
        '422':
          description: Unprocessable entity - Schema validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /beckn/v1/discover/browser-search:
    get:
      summary: Browser-friendly search API
      description: |
        URL-based search API for browser navigation and direct links using JSONPath expressions.
        Response format is determined by the Accept header:
        - Accept: text/html → Returns browser-friendly HTML page (default)
        - Accept: application/json → Returns structured JSON data in same format as structured query API
        Supports complex filtering via URL-encoded JSONPath expressions and pagination objects.
        Generic search across all entity types (items, providers, catalogs) based on filter criteria.
      operationId: browserSearch
      tags:
        - Browser Search
      parameters:
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            enum: ["text/html", "application/json"]
            default: "text/html"
          description: |
            Response format preference. 
            - Accept: text/html → Returns browser-friendly HTML page (default)
            - Accept: application/json → Returns structured JSON data in same format as structured query API
          example: "text/html"
        - name: filters
          in: query
          required: false
          schema:
            type: string
          description: URL-encoded JSONPath expression for complex filtering
          example: "%24%5B%3F%28%40.price%20%3C%3D%201000%20%26%26%20%40.brand%20%3D%3D%20%27Premium%20Tech%27%29%5D"
        - name: pagination
          in: query
          required: false
          schema:
            type: string
          description: URL-encoded pagination object
          example: "%7B%22page%22%3A1%2C%22limit%22%3A20%7D"
      responses:
        '200':
          description: Successful search response
          content:
            text/html:
              schema:
                type: string
              example: |
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Search Results - Premium Tech Electronics | Beckn Catalog</title>
                    <meta name="description" content="Premium Tech Electronics Store - High-quality electronics and gaming equipment with premium brands.">
                    
                    <!-- Open Graph Tags -->
                    <meta property="og:title" content="Premium Tech Electronics Store">
                    <meta property="og:description" content="High-quality electronics and gaming equipment from Premium Tech">
                    <meta property="og:type" content="website">
                    <meta property="og:url" content="https://catalog.beckn.org/search?network_id=bap.net/electronics">
                    
                    <!-- Structured Data -->
                    <script type="application/ld+json">
                    {
                      "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json",
                      "@type": "beckn:Catalog",
                      "beckn:descriptor": {
                        "@type": "beckn:Descriptor",
                        "schema:name": "Premium Tech Electronics Store",
                        "beckn:shortDesc": "High-quality electronics and gaming equipment"
                      },
                      "beckn:timePeriod": {
                        "@type": "beckn:TimePeriod",
                        "schema:startDate": "2025-01-27",
                        "schema:endDate": "2026-12-31"
                      },
                      "beckn:items": [
                        {
                          "@type": "beckn:ElectronicItem",
                          "electronic:electronicItemId": "laptop-item-001",
                          "schema:name": "Premium Gaming Laptop Pro",
                          "beckn:descriptor": {
                            "@type": "beckn:Descriptor",
                            "schema:name": "Premium Gaming Laptop Pro",
                            "beckn:shortDesc": "High-performance gaming laptop with RTX graphics"
                          },
                          "electronic:price": {
                            "@type": "beckn:Price",
                            "schema:price": 1499.99,
                            "schema:priceCurrency": "USD"
                          },
                          "electronic:brand": {
                            "@type": "schema:Brand",
                            "schema:name": "Premium Tech"
                          },
                          "beckn:rating": {
                            "@type": "schema:Rating",
                            "schema:ratingValue": 4.8,
                            "schema:ratingCount": 156
                          }
                        }
                      ]
                    }
                    </script>
                </head>
                <body>
                    <header>
                        <nav>
                            <div class="search-bar">
                                <form action="/beckn/v1/discover/browser-search" method="GET">
                                    <input type="text" name="query" placeholder="Search for electronics, gaming equipment...">
                                    <button type="submit">Search</button>
                                </form>
                            </div>
                        </nav>
                    </header>
                    
                    <main>
                        <section class="search-results">
                            <div class="results-header">
                                <h1>Premium Tech Electronics Store</h1>
                                <p class="store-description">High-quality electronics and gaming equipment</p>
                                <p class="availability">Available from Jan 27, 2025 to Dec 31, 2026</p>
                            </div>
                            
                            <div class="results-grid">
                                <article class="result-item">
                                    <div class="item-details">
                                        <h2>Premium Gaming Laptop Pro</h2>
                                        <p class="description">High-performance gaming laptop with RTX graphics</p>
                                        <div class="rating">
                                            <span class="stars">★★★★★</span>
                                            <span class="rating-value">4.8</span>
                                            <span class="rating-count">(156 reviews)</span>
                                        </div>
                                        <div class="price">$1,499.99 USD</div>
                                        <div class="brand">Brand: Premium Tech</div>
                                        <div class="item-id">ID: laptop-item-001</div>
                                    </div>
                                </article>
                            </div>
                        </section>
                    </main>
                    
                    <footer>
                        <p>&copy; 2024 Beckn Catalog. Powered by Beckn Protocol.</p>
                    </footer>
                </body>
                </html>
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverResponse'
              examples:
                electronic_items:
                  summary: Electronic items search results
                  description: JSON response for electronic items search
                  value:
                    id: "api.beckn.discover.browser-search"
                    ver: "v2"
                    ts: "2024-04-10T16:10:50+05:30"
                    params:
                      msgid: "browser-search-001"
                      traceid: "browser-search-001"
                    response:
                      context:
                        network_id: "bap.net/electronics"
                        action: "discover"
                      catalogs:
                        - "@type": "beckn:Catalog"
                          "beckn:descriptor":
                            "@type": "beckn:Descriptor"
                            "schema:name": "Premium Tech Electronics Store"
                            "beckn:shortDesc": "High-quality electronics and gaming equipment"
                          "beckn:timePeriod":
                            "@type": "beckn:TimePeriod"
                            "schema:startDate": "2025-01-27"
                            "schema:endDate": "2026-12-31"
                          "beckn:items":
                            - "@context": "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
                              "@type": "beckn:ElectronicItem"
                              "electronic:electronicItemId": "laptop-item-001"
                              "schema:name": "Premium Gaming Laptop Pro"
                              "beckn:descriptor":
                                "@type": "beckn:Descriptor"
                                "schema:name": "Premium Gaming Laptop Pro"
                                "beckn:shortDesc": "High-performance gaming laptop with RTX graphics"
                              "electronic:price":
                                "@type": "beckn:Price"
                                "schema:price": 1499.99
                                "schema:priceCurrency": "USD"
                              "electronic:brand":
                                "@type": "schema:Brand"
                                "schema:name": "Premium Tech"
                              "beckn:rating":
                                "@type": "beckn:Rating"
                                "beckn:ratingValue": 4.8
                                "beckn:ratingCount": 156
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_entity_type:
                  summary: Invalid entity type error
                  description: Error when entity_type is missing or invalid
                  value:
                    error:
                      code: "INVALID_ENTITY_TYPE"
                      message: "entity_type is required and must be one of: item, provider, catalog"
        '404':
          description: No results found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_results:
                  summary: No results found error
                  description: Error when no items match the search criteria
                  value:
                    error:
                      code: "NO_RESULTS_FOUND"
                      message: "No items found matching the specified criteria"
                      details:
                        search_criteria:
                          entity_type: "item"
                          category: "electric_vehicles"
                          price_max: 50000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    DiscoverRequest:
      type: object
      required:
        - context
      properties:
        context:
          $ref: '#/components/schemas/RequestContext'
        text_search:
          type: string
          description: Text search query (free text search)
          example: "gaming laptop premium tech"
        filters:
          type: string
          description: JSONPath expression for filtering (RFC 9355)
          example: "$[?(@.rating.value >= 4.0 && @.electronic.brand.name == 'Premium Tech')]"
        pagination:
          $ref: '#/components/schemas/Pagination'
      
      # At least one of text_search or filters is required
      # Both can be provided together for combined search capabilities
      # Pagination is optional and defaults to page 1, limit 20 if not specified
      oneOf:
        - required: ["text_search"]
        - required: ["filters"]
        - required: ["text_search", "filters"]


    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number for pagination (defaults to 1 if not specified)
          example: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Number of items per page (defaults to 20 if not specified)
          example: 20

    RequestContext:
      type: object
      properties:
        ts:
          type: string
          format: date-time
          description: Timestamp of the request
          example: "2024-04-10T16:10:50+05:30"
        msgid:
          type: string
          format: uuid
          description: Unique message identifier
          example: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
        traceid:
          type: string
          format: uuid
          description: Trace identifier for request tracking
          example: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
        network_id:
          type: string
          description: Network identifier for the BAP (Beckn App Provider)
          example: "bap.net/electronics"
        schema_context:
          type: string
          format: uri
          description: URI to the specific item's schema-settings.json file that defines the search and response structure
          example: "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"

    DiscoverResponse:
      type: object
      required:
        - context
        - catalogs
      properties:
        context:
          $ref: '#/components/schemas/ResponseContext'
        catalogs:
          type: array
          items:
            $ref: '#/components/schemas/Catalog'
          description: Array of catalogs containing items

    ResponseContext:
      type: object
      properties:
        ts:
          type: string
          format: date-time
          description: Timestamp of the response
          example: "2024-04-10T16:10:50+05:30"
        msgid:
          type: string
          format: uuid
          description: Unique message identifier
          example: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
        traceid:
          type: string
          format: uuid
          description: Trace identifier for request tracking
          example: "4a7f14c3-d61e-4d4f-be78-181834eeff6d"
        network_id:
          type: string
          description: Network identifier for the BAP (Beckn App Provider)
          example: "bap.net/electronics"

    ItemResult:
      type: object
      required:
        - "@context"
        - "@type"
      properties:
        "@context":
          type: string
          format: uri
          description: Schema context URI pointing to the specific item schema-settings.json
          example: "https://example.org/schema/items/v1/ElectronicItem/schema-settings.json"
        "@type":
          type: string
          description: Item type (ElectronicItem, GroceryItem, etc.)
          example: "beckn:ElectronicItem"
        # Additional properties will vary based on the item type
        # Any schema extending beckn:Item via owl:intersectionOf is supported
        # Examples shown are for ElectronicItem, but the API works with any item type
        "electronic:electronicItemId":
          type: string
          description: Unique identifier for the electronic item
          example: "tesla-model3-001"
        "schema:name":
          type: string
          description: Name of the item
          example: "Tesla Model 3"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "electronic:price":
          $ref: '#/components/schemas/Price'
        "electronic:brand":
          $ref: '#/components/schemas/Brand'
        "beckn:rating":
          $ref: '#/components/schemas/Rating'

    Descriptor:
      type: object
      required:
        - "@type"
        - "schema:name"
      properties:
        "@type":
          type: string
          example: "beckn:Descriptor"
        "schema:name":
          type: string
          example: "Tesla Model 3"
        "beckn:shortDesc":
          type: string
          example: "Electric sedan with autopilot"
        "beckn:longDesc":
          type: string
          example: "Premium electric sedan featuring advanced autopilot capabilities"

    Price:
      type: object
      required:
        - "@type"
        - "schema:price"
        - "schema:priceCurrency"
      properties:
        "@type":
          type: string
          example: "beckn:Price"
        "schema:price":
          type: number
          example: 45000
        "schema:priceCurrency":
          type: string
          example: "USD"

    Brand:
      type: object
      required:
        - "@type"
        - "schema:name"
      properties:
        "@type":
          type: string
          example: "schema:Brand"
        "schema:name":
          type: string
          example: "Tesla"

    Rating:
      type: object
      required:
        - "@type"
        - "schema:ratingValue"
        - "schema:ratingCount"
      properties:
        "@type":
          type: string
          example: "schema:Rating"
        "schema:ratingValue":
          type: number
          minimum: 0
          maximum: 5
          example: 4.8
        "schema:ratingCount":
          type: integer
          minimum: 0
          example: 1250

    Catalog:
      type: object
      required:
        - "@type"
        - "beckn:descriptor"
        - "beckn:items"
      properties:
        "@type":
          type: string
          description: Type of the catalog
          example: "beckn:Catalog"
        "beckn:descriptor":
          $ref: '#/components/schemas/Descriptor'
        "beckn:timePeriod":
          $ref: '#/components/schemas/TimePeriod'
        "beckn:items":
          type: array
          items:
            $ref: '#/components/schemas/ItemResult'
          description: Array of items in this catalog

    TimePeriod:
      type: object
      required:
        - "@type"
        - "schema:startDate"
        - "schema:endDate"
      properties:
        "@type":
          type: string
          description: Type of the time period
          example: "beckn:TimePeriod"
        "schema:startDate":
          type: string
          format: date
          description: Start date of the catalog validity
          example: "2025-01-27"
        "schema:endDate":
          type: string
          format: date
          description: End date of the catalog validity
          example: "2026-12-31"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_SCHEMA_FIELD"
        message:
          type: string
          description: Human-readable error message
          example: "Field 'electronic:invalidField' not found in ElectronicItem schema"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for API authentication

security:
  - BearerAuth: []

tags:
  - name: Discovery
    description: Item discovery and search operations

  - name: Browser Search
    description: Browser-friendly URL-based search operations
